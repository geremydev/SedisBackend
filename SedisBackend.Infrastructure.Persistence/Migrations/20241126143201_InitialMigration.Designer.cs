// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SedisBackend.Infrastructure.Persistence.Contexts;

#nullable disable

namespace SedisBackend.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SedisContext))]
    [Migration("20241126143201_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConsultationRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsultationType")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("826783f5-dd4f-419e-bb2f-4a8307c54b9b"),
                            AppointmentDate = new DateTime(2024, 11, 10, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatus = 1,
                            ConsultationRoom = "Room 101",
                            ConsultationType = 0,
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            IsDeleted = false,
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950")
                        },
                        new
                        {
                            Id = new Guid("5f028eff-479b-43dc-9e1b-2e6839c794f8"),
                            AppointmentDate = new DateTime(2024, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatus = 3,
                            ConsultationRoom = "Room 202",
                            ConsultationType = 1,
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            HealthCenterId = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da"),
                            IsDeleted = false,
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9")
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.HealthCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthCenterCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthCenters", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            HealthCenterCategory = "General",
                            LocationId = new Guid("945e98f3-80c7-4444-8d93-74b72efc78b1"),
                            Name = "Central Health Center"
                        },
                        new
                        {
                            Id = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da"),
                            HealthCenterCategory = "Especializado",
                            LocationId = new Guid("a6e819b6-3996-49d6-afc7-9b47206dcadc"),
                            Name = "North Health Center"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11, 8)");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("945e98f3-80c7-4444-8d93-74b72efc78b1"),
                            EntityId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            EntityType = "HealthCenter",
                            Latitude = 18.5067m,
                            Longitude = -69.8937m,
                            MunicipalityId = new Guid("34567890-3456-3456-3456-34567890abcd"),
                            PostalCode = "10101",
                            ProvinceId = new Guid("23456789-2345-2345-2345-234567890abc"),
                            RegionId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da"),
                            EntityId = new Guid("a6e819b6-3996-49d6-afc7-9b47206dcadc"),
                            EntityType = "HealthCenter",
                            Latitude = 18.4796m,
                            Longitude = -69.9010m,
                            MunicipalityId = new Guid("65432109-6543-6543-6543-abcdef345678"),
                            PostalCode = "10202",
                            ProvinceId = new Guid("76543210-5432-5432-5432-abcdef234567"),
                            RegionId = new Guid("87654321-4321-4321-4321-abcdef123456")
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.MedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a2b3c4-d5e6-789f-0123-456789abcdef"),
                            Description = "Specializes in the treatment of heart conditions.",
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-1234-56789abcdef0"),
                            Description = "Focuses on the diagnosis and treatment of neurological disorders.",
                            Name = "Neurology"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicalHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OtherPrescriptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalHistoryId")
                        .IsUnique();

                    b.ToTable("Prescriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a5d9b2e-8c4a-4f7e-9d1c-3f6b2a7d8e9c"),
                            ClinicalHistoryId = new Guid("c1aaea0c-c739-4125-a7b3-28da602de5a0"),
                            OtherPrescriptions = "Recomendación de ejercicio diario"
                        },
                        new
                        {
                            Id = new Guid("2d7a9b5c-1e3a-4b8c-9f7e-5b3d6a1c9e7b"),
                            ClinicalHistoryId = new Guid("47d713da-eb0f-44c8-bd0d-d1882834c81b"),
                            OtherPrescriptions = "Dieta baja en sodio"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Products.LabTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LabTests", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Products.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Concentration")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DosageForm")
                        .HasColumnType("int");

                    b.Property<string>("DrugInteractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precautions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Presentation")
                        .HasColumnType("int");

                    b.Property<int>("RouteOfAdministration")
                        .HasColumnType("int");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfMeasurement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2d1c5b7-8f4e-4a6b-9c3d-5e7a1b2c9f5d"),
                            ActiveIngredient = "Metformina",
                            Concentration = 500m,
                            Contraindications = "Insuficiencia renal",
                            DosageForm = 2,
                            DrugInteractions = "No usar con insulina",
                            ImageUrl = "http://example.com/image1.jpg",
                            Indications = "Tratamiento de diabetes tipo 2",
                            Name = "Metformina",
                            NationalCode = "M500",
                            Precautions = "Controlar niveles de glucosa",
                            Presentation = 11,
                            RouteOfAdministration = 1,
                            SideEffects = "Náuseas, vómitos",
                            UnitOfMeasurement = 9
                        },
                        new
                        {
                            Id = new Guid("e6b5a3c7-9d4f-4a8b-7e1c-2d9f1a5b3c6d"),
                            ActiveIngredient = "Atorvastatina",
                            Concentration = 20m,
                            Contraindications = "Enfermedad hepática",
                            DosageForm = 2,
                            DrugInteractions = "No usar con ciertos antibióticos",
                            ImageUrl = "http://example.com/image2.jpg",
                            Indications = "Reducción de colesterol",
                            Name = "Atorvastatina",
                            NationalCode = "A020",
                            Precautions = "Controlar niveles de lípidos",
                            Presentation = 4,
                            RouteOfAdministration = 6,
                            SideEffects = "Dolor muscular",
                            UnitOfMeasurement = 1
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.AppointmentPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicalHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResultUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("AppointmentPrescriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2d5c7a1-3e4b-8f9d-1a2c-6b3e5d9f4c7a"),
                            AppointmentId = new Guid("826783f5-dd4f-419e-bb2f-4a8307c54b9b"),
                            ClinicalHistoryId = new Guid("c1aaea0c-c739-4125-a7b3-28da602de5a0"),
                            PerformedDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrescriptionId = new Guid("3a5d9b2e-8c4a-4f7e-9d1c-3f6b2a7d8e9c"),
                            ResultUrl = "http://example.com/results1.pdf",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("b8a5d3f2-4e9a-6b7c-1d2f-5c9e3a7d4f8b"),
                            AppointmentId = new Guid("5f028eff-479b-43dc-9e1b-2e6839c794f8"),
                            ClinicalHistoryId = new Guid("47d713da-eb0f-44c8-bd0d-d1882834c81b"),
                            PerformedDate = new DateTime(2024, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrescriptionId = new Guid("2d7a9b5c-1e3a-4b8c-9f7e-5b3d6a1c9e7b"),
                            ResultUrl = "http://example.com/results2.pdf",
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.DoctorHealthCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntryHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExitHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("DoctorHealthCenters", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e88a1aff-ec0d-429d-ab3b-4a62dafef800"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            EntryHour = "08:00:00",
                            ExitHour = "17:00:00",
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452")
                        },
                        new
                        {
                            Id = new Guid("8edbaf29-5df0-4014-93d6-1a4d12c506ca"),
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            EntryHour = "09:00:00",
                            ExitHour = "18:00:00",
                            HealthCenterId = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da")
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.DoctorMedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("DoctorMedicalSpecialties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ebe84ff-4955-4092-883d-060fbb4b0a37"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("f1a2b3c4-d5e6-789f-0123-456789abcdef")
                        },
                        new
                        {
                            Id = new Guid("93003508-bcd0-4e53-99c9-abee314f99c1"),
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            MedicalSpecialtyId = new Guid("a1b2c3d4-e5f6-7890-1234-56789abcdef0")
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.HealthCenterServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("HealthCenterServices", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.MedicationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TreatmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TreatmentStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("MedicationPrescriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3e2f7a9-1d4b-8f5c-9a6e-2d9b5c3a7f8e"),
                            Dosage = "500 mg cada 12 horas",
                            MedicationId = new Guid("a2d1c5b7-8f4e-4a6b-9c3d-5e7a1b2c9f5d"),
                            PrescriptionId = new Guid("3a5d9b2e-8c4a-4f7e-9d1c-3f6b2a7d8e9c"),
                            Status = "Consuming",
                            TreatmentEnd = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TreatmentStart = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9f1c3e5-7b6a-4f2c-9a8e-3d5b7a2f8c1e"),
                            Dosage = "20 mg diario",
                            MedicationId = new Guid("e6b5a3c7-9d4f-4a8b-7e1c-2d9f1a5b3c6d"),
                            PrescriptionId = new Guid("2d7a9b5c-1e3a-4b8c-9f7e-5b3d6a1c9e7b"),
                            Status = "Prescribed",
                            TreatmentEnd = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TreatmentStart = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientAllergy", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AllergyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllergicReaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("PatientAllergies", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            AllergyId = new Guid("33c7785e-58f4-4ab8-9f54-51bf8978963f"),
                            Allergen = "Peanuts",
                            AllergicReaction = "Anaphylaxis",
                            Description = "Cuadro anafiláctivo grave",
                            DiagnosisDate = new DateTime(2020, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("e0a734b4-18bb-4c64-8f85-54487c656612"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            AllergyId = new Guid("b0fa92b6-1a21-4e9e-845e-e2d5bbfe5e1d"),
                            Allergen = "Penicilin",
                            AllergicReaction = "Rash",
                            Description = "Rash grave",
                            DiagnosisDate = new DateTime(2019, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("a15c2d9b-d758-46b7-aceb-22a163c92a5f"),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientDiscapacity", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "DiscapacityId");

                    b.HasIndex("DiscapacityId");

                    b.ToTable("PatientDiscapacities", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            DiscapacityId = new Guid("1b54e13f-7a32-4cc1-ad6d-35298426a2fb"),
                            Description = "Description",
                            DiagnosisDate = new DateTime(2018, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("ae6aa623-f515-4b49-a926-5e72369cce77"),
                            Severity = "Severa",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            DiscapacityId = new Guid("5c52a9d3-6ee2-496e-a922-139de857d9d4"),
                            Description = "Description",
                            DiagnosisDate = new DateTime(2020, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("79dad0d7-f852-486c-a369-9765aafefa86"),
                            Severity = "Moderada",
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientHealthInsurance", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "HealthInsuranceId");

                    b.HasIndex("HealthInsuranceId");

                    b.ToTable("PatientHealthInsurances", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            Id = new Guid("df7b9b16-ec96-4b9a-819e-df4b3c7b96c1"),
                            PolicyNumber = "P0123456789",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            Id = new Guid("5f6b3f9a-8d5e-4b2e-ae3f-2c6a78f4f9a1"),
                            PolicyNumber = "P0987654321",
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientIllness", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IllnessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("Date");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId", "IllnessId");

                    b.HasIndex("IllnessId");

                    b.ToTable("PatientIllnesses", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            IllnessId = new Guid("1097ba6f-7f4d-4fcc-ae34-f89cf70930a4"),
                            DiagnosisDate = new DateTime(2019, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentURL = "https://example.com/document/diabetes-diagnosis.pdf",
                            Id = new Guid("f96d4a51-984d-43d6-9ccd-2c4c54d3465c"),
                            Notes = "Paciente monitoreado regularmente con niveles de glucosa controlados.",
                            Status = "Activa"
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            IllnessId = new Guid("99c26293-7562-4d6a-9aa1-260bedb215a6"),
                            DiagnosisDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DischargeDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentURL = "https://example.com/document/hypertension-diagnosis.pdf",
                            Id = new Guid("7facd453-0419-4fa1-bd80-c4901d62853f"),
                            Notes = "Paciente responde bien al tratamiento y mantiene una presión estable.",
                            Status = "En remisión"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientRiskFactor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskFactorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "RiskFactorId");

                    b.HasIndex("RiskFactorId");

                    b.ToTable("PatientRiskFactors", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            RiskFactorId = new Guid("454e8d39-1363-41f4-a2d2-b99fde743fbf"),
                            Id = new Guid("f68f3e15-994e-4c2d-a3ee-863d753032b0"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            RiskFactorId = new Guid("6522252f-0021-433b-8174-f4e0833f859a"),
                            Id = new Guid("807afcdf-633e-44a9-b688-4f3dd50ab905"),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientVaccine", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppliedDoses")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastApplicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "VaccineId");

                    b.HasIndex("VaccineId");

                    b.ToTable("PatientVaccines", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            VaccineId = new Guid("c28e855d-2602-423f-a4d5-26954df029da"),
                            AppliedDoses = 2,
                            Id = new Guid("12ae1c94-c70d-4379-8cca-e8405a814c6d"),
                            LastApplicationDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            VaccineId = new Guid("384e34fb-7d23-4123-a78e-13d7b0a91110"),
                            AppliedDoses = 1,
                            Id = new Guid("086dd520-144e-4afe-98aa-2bf09033048c"),
                            LastApplicationDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            IsActive = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Assistant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Assistants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            IsActive = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            IsActive = false,
                            IsDeleted = false,
                            LicenseNumber = "LIC12345678"
                        },
                        new
                        {
                            Id = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            IsActive = false,
                            IsDeleted = false,
                            LicenseNumber = "LIC98765432"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodTypeLabResultURl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PrimaryCarePhysicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            BloodType = "A-",
                            BloodTypeLabResultURl = "http://example.com/lab-results/alice-smith",
                            EmergencyContactName = "Bob Smith",
                            EmergencyContactPhone = "987-654-3210",
                            Height = 165.2m,
                            IsActive = false,
                            IsDeleted = false,
                            Weight = 60.8m
                        },
                        new
                        {
                            Id = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            BloodType = "O+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/john-doe",
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactPhone = "123-456-7890",
                            Height = 180.5m,
                            IsActive = false,
                            IsDeleted = false,
                            Weight = 75.3m
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608647",
                            ConcurrencyStamp = "2b62fd86-efb4-4ea6-8e1a-8af769880621",
                            Email = "adminuser@email.com",
                            EmailConfirmed = true,
                            FirstName = "Brahiam",
                            ImageUrl = ".",
                            IsActive = true,
                            LastName = "Montero",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEK9jiB+uDX3cpXyfn6ZomFaiNWhBuXf7Ux1ZkbmuS2cMVdTdPB+OVu9EnTY26EkYkg==",
                            PhoneNumber = "829-143-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d1b79c6c-90e8-469a-ab3f-c491a1cc036a",
                            Sex = "M",
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        },
                        new
                        {
                            Id = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608641",
                            ConcurrencyStamp = "81b32b5b-0ddd-4cbe-87f4-9019991f2b7d",
                            Email = "patientuser@email.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            ImageUrl = ".",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHGDhBdrGXyM6SjbnYFoDyS/jDj+MIZNXXXL9K6wySBgiYqA986yQcx0SonRb9F58A==",
                            PhoneNumber = "829-163-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e62ddea1-a960-4510-946c-9e378ad9d601",
                            Sex = "M",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        },
                        new
                        {
                            Id = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608648",
                            ConcurrencyStamp = "fe737e19-0acf-4b83-bc5f-001bbb43b512",
                            Email = "patient2@email.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            ImageUrl = ".",
                            IsActive = true,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELaElCtF68O9Kix1fSYAa8TVE+74hPzqWHZpxu2g3sAkna2H1tdPPlZAr2USBirIdw==",
                            PhoneNumber = "829-128-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8b6abd34-e838-4ada-86f3-6706b61a0632",
                            Sex = "F",
                            TwoFactorEnabled = false,
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1995, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "0987634321",
                            ConcurrencyStamp = "6bec2a65-97b5-4691-a37a-8c3989f6ef6e",
                            Email = "assistantuser@email.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            ImageUrl = ".",
                            IsActive = false,
                            LastName = "Martínez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECfKjpcmJPEHRG8EgZzCZbChJTfbW3dCxqJtBm2vPoNkMpZqVXOh4TBqlR/sOap2jg==",
                            PhoneNumber = "829-123-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b456edbb-1537-465d-b71d-bd51d2569180",
                            Sex = "F",
                            TwoFactorEnabled = false,
                            UserName = "assistantuser"
                        },
                        new
                        {
                            Id = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608640",
                            ConcurrencyStamp = "d2f16904-5a68-476c-894a-86f90e4d14e9",
                            Email = "doctoruser@email.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            ImageUrl = ".",
                            IsActive = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIpRjmHq1ZEvGHId32I+dGBKJtE0pUvjYFWDxn630tqH6ferd+4TzsR09iVwAnRlRQ==",
                            PhoneNumber = "829-123-9812",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7f3d1029-a441-4e90-b872-38cc01f1ceb2",
                            Sex = "M",
                            TwoFactorEnabled = false,
                            UserName = "doctoruser"
                        },
                        new
                        {
                            Id = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1975, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "0987654321",
                            ConcurrencyStamp = "992df307-02f6-4a73-804d-ea6a05b2721e",
                            Email = "doctoruser2@email.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            ImageUrl = ".",
                            IsActive = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMdFe2DmH1ptvpuT0YFmAlKw5QhEtGxzoIDD/Z30zsKV0fjQic7inIFsoAKyjx4+Zw==",
                            PhoneNumber = "829-123-9231",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2c7ae9e8-7fde-4b65-9244-e81b31ea6977",
                            Sex = "F",
                            TwoFactorEnabled = false,
                            UserName = "doctoruser2"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergen")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33c7785e-58f4-4ab8-9f54-51bf8978963f"),
                            Allergen = "Peanuts",
                            IcdCode = "123123"
                        },
                        new
                        {
                            Id = new Guid("b0fa92b6-1a21-4e9e-845e-e2d5bbfe5e1d"),
                            Allergen = "Penicillin",
                            IcdCode = "123123"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("ClinicalHistories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1aaea0c-c739-4125-a7b3-28da602de5a0"),
                            CurrentHistory = "No significant issues. Patient reports feeling well overall.",
                            Diagnosis = "Hypertension",
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            IsDeleted = false,
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            PhysicalExamination = "\r\n                        Vital Signs: BP 120/80 mmHg, HR 75 bpm, RR 16 bpm, Temp 36.7°C.\r\n                        Anthropometry: Weight 72 kg, Height 1.75 m, BMI 23.5 kg/m².\r\n                        General: Skin and mucosa appear healthy, no lesions observed.\r\n                        Cardiovascular: Regular rhythm, no murmurs detected.\r\n                        Respiratory: Clear breath sounds, no wheezes or crackles.\r\n                        Abdomen: Soft, non-tender, no masses or organomegaly.\r\n                        Extremities: No edema, peripheral pulses are intact.\r\n                    ",
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ReasonForVisit = "Routine check-up",
                            RegisterDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("47d713da-eb0f-44c8-bd0d-d1882834c81b"),
                            CurrentHistory = "Patient reports feeling better with current medication. No new symptoms.",
                            Diagnosis = "Diabetes",
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            IsDeleted = false,
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            PhysicalExamination = "\r\n                        Vital Signs: BP 140/90 mmHg, HR 82 bpm, RR 18 bpm, Temp 37.1°C.\r\n                        Anthropometry: Weight 80 kg, Height 1.80 m, BMI 24.7 kg/m².\r\n                        General: Skin warm, no cyanosis or jaundice observed.\r\n                        Cardiovascular: Heart sounds normal, no murmurs detected.\r\n                        Respiratory: Lung fields are clear to auscultation.\r\n                        Abdomen: Non-distended, no tenderness, liver and spleen not palpable.\r\n                        Extremities: No cyanosis or clubbing, peripheral pulses present.\r\n                    ",
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ReasonForVisit = "Follow-up on medication.",
                            RegisterDate = new DateTime(2024, 11, 26, 10, 32, 0, 464, DateTimeKind.Local).AddTicks(4252)
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Family_History.FamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelativeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RelativeId");

                    b.ToTable("FamilyHistories", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discapacities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b54e13f-7a32-4cc1-ad6d-35298426a2fb"),
                            Description = "Paraplejia que afecta las extremidades inferiores.",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5c52a9d3-6ee2-496e-a922-139de857d9d4"),
                            Description = "Pérdida total de la audición en ambos oídos.",
                            Type = 2
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Illnesses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1097ba6f-7f4d-4fcc-ae34-f89cf70930a4"),
                            CodeType = 0,
                            Description = "Enfermedad crónica en la que el páncreas produce poca o ninguna insulina.",
                            IcdCode = "E10",
                            Name = "Diabetes Mellitus Tipo 1"
                        },
                        new
                        {
                            Id = new Guid("99c26293-7562-4d6a-9aa1-260bedb215a6"),
                            CodeType = 0,
                            Description = "Condición de presión arterial elevada sin causa identificable.",
                            IcdCode = "I10",
                            Name = "Hipertensión esencial (primaria)"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssessmentLevel")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskFactors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("454e8d39-1363-41f4-a2d2-b99fde743fbf"),
                            AssessmentLevel = 3,
                            Category = 1,
                            Code = "L123",
                            CodeType = 0,
                            Description = "Consumo excesivo de alcohol"
                        },
                        new
                        {
                            Id = new Guid("6522252f-0021-433b-8174-f4e0833f859a"),
                            AssessmentLevel = 2,
                            Category = 2,
                            Code = "G789",
                            CodeType = 0,
                            Description = "Historia familiar de diabetes"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doses")
                        .HasColumnType("int");

                    b.Property<string>("Laboratory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c28e855d-2602-423f-a4d5-26954df029da"),
                            Disease = "COVID-19",
                            Doses = 2,
                            Laboratory = "Pfizer-BioNTech",
                            Name = "Vacuna COVID-19"
                        },
                        new
                        {
                            Id = new Guid("384e34fb-7d23-4123-a78e-13d7b0a91110"),
                            Disease = "Influenza",
                            Doses = 1,
                            Laboratory = "Sanofi Pasteur",
                            Name = "Vacuna contra la gripe"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoverageLevel")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HealthInsurances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            CoverageLevel = 1,
                            InsuranceCompany = "SaludCo",
                            InsuranceName = "Seguro Salud Total",
                            PolicyType = 0
                        },
                        new
                        {
                            Id = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            CoverageLevel = 3,
                            InsuranceCompany = "VivaSalud",
                            InsuranceName = "Plan Familiar Salud",
                            PolicyType = 1
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.MedicationCoverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CoinsurancePercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("CopayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("CoverageStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PriorAuthorizationRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthInsuranceId");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationCoverages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e3245b7-6f76-411a-93a1-2c2a4793e12e"),
                            CoinsurancePercentage = 80m,
                            CopayAmount = 50m,
                            CoverageStatus = 0,
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            MedicationId = new Guid("a2d1c5b7-8f4e-4a6b-9c3d-5e7a1b2c9f5d"),
                            PriorAuthorizationRequired = true
                        },
                        new
                        {
                            Id = new Guid("4e3e5c9f-1db4-47a4-a853-4e5b3c4f9a1d"),
                            CoinsurancePercentage = 70m,
                            CopayAmount = 30m,
                            CoverageStatus = 1,
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            MedicationId = new Guid("e6b5a3c7-9d4f-4a8b-7e1c-2d9f1a5b3c6d"),
                            PriorAuthorizationRequired = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Appointment", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Prescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", "ClinicalHistory")
                        .WithOne("Prescription")
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Models.Prescription", "ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ClinicalHistory");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.AppointmentPrescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", "ClinicalHistory")
                        .WithMany()
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Prescription", "Prescription")
                        .WithMany("PrescribedAppointments")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ClinicalHistory");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.DoctorHealthCenter", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("CurrentlyWorkingHealthCenters")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Doctors")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.DoctorMedicalSpecialty", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Doctors")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.HealthCenterServices", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Services")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.MedicationPrescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Products.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Prescription", "Prescription")
                        .WithMany("PrescribedMedications")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientAllergy", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", "Allergy")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientDiscapacity", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", "Discapacity")
                        .WithMany("PatientDiscapacities")
                        .HasForeignKey("DiscapacityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Discapacities")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Discapacity");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientHealthInsurance", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", "HealthInsurance")
                        .WithMany("SubscribedPatients")
                        .HasForeignKey("HealthInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("HealthInsurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientIllness", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", "Illness")
                        .WithMany("PatientIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Illnesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Illness");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientRiskFactor", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("RiskFactors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", "RiskFactor")
                        .WithMany("PatientRiskFactors")
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RiskFactor");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientVaccine", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Vaccines")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", "Vaccine")
                        .WithMany("PatientVaccines")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Admin", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Admins")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Assistant", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Assistants")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Assistant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("DevelopedClinicalHistories")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("ClinicalHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Family_History.FamilyHistory", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("FamilyHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId");

                    b.Navigation("Patient");

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.MedicationCoverage", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", "HealthInsurance")
                        .WithMany("MedicationCoverages")
                        .HasForeignKey("HealthInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Products.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthInsurance");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.HealthCenter", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Appointments");

                    b.Navigation("Assistants");

                    b.Navigation("Doctors");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.MedicalSpecialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Prescription", b =>
                {
                    b.Navigation("PrescribedAppointments");

                    b.Navigation("PrescribedMedications");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CurrentlyWorkingHealthCenters");

                    b.Navigation("DevelopedClinicalHistories");

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("ClinicalHistories");

                    b.Navigation("Discapacities");

                    b.Navigation("FamilyHistories");

                    b.Navigation("HealthInsurances");

                    b.Navigation("Illnesses");

                    b.Navigation("RiskFactors");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", b =>
                {
                    b.Navigation("PatientAllergies");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", b =>
                {
                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", b =>
                {
                    b.Navigation("PatientDiscapacities");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", b =>
                {
                    b.Navigation("PatientIllnesses");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", b =>
                {
                    b.Navigation("PatientRiskFactors");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", b =>
                {
                    b.Navigation("PatientVaccines");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", b =>
                {
                    b.Navigation("MedicationCoverages");

                    b.Navigation("SubscribedPatients");
                });
#pragma warning restore 612, 618
        }
    }
}
