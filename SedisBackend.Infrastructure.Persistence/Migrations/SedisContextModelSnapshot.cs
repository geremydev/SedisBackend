// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SedisBackend.Infrastructure.Persistence.Contexts;

#nullable disable

namespace SedisBackend.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SedisContext))]
    partial class SedisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsultationRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("MedicalConsultationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            AppointmentDate = new DateTime(2023, 10, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ConsultationRoom = "Room 101",
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = new Guid("0c8b4a52-f34c-4a7f-90d2-3c84d8c1d6b1"),
                            AppointmentDate = new DateTime(2023, 11, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            ConsultationRoom = "Room 102",
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            HealthCenterId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            MedicalConsultationId = new Guid("2c4f7b60-71a9-4ea8-82f1-7f3c0dbed832"),
                            PatientId = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            Status = "Requested"
                        },
                        new
                        {
                            Id = new Guid("d6c8a3b4-a72f-45df-9143-17c8b3d2fdf0"),
                            AppointmentDate = new DateTime(2023, 11, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ConsultationRoom = "Room 103",
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            HealthCenterId = new Guid("c8b0812e-7205-40ad-a249-fb9e6ae64c37"),
                            MedicalConsultationId = new Guid("8f7319e7-89b4-4d5c-90cb-cf2e5a0c9fbd"),
                            PatientId = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            Status = "Ongoing"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.HealthCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCenterCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("HealthCenters", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            Details = "Ninguno",
                            HealthCenterCategory = "General",
                            LocationId = new Guid("a1c1b2c3-d4e5-678f-1234-56789abcdef0"),
                            LocationString = "SDE",
                            Name = "Hospital General Dr. Darío Contreras",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da"),
                            Details = "Ninguno",
                            HealthCenterCategory = "Specialized",
                            LocationId = new Guid("b2c3d4e5-f678-1234-5678-abcdef123456"),
                            LocationString = "SDE",
                            Name = "Centro de Diagnóstico Médico (CDM)",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            Details = "Ninguno",
                            HealthCenterCategory = "General",
                            LocationId = new Guid("c3d4e5f6-1234-5678-9abc-def123456789"),
                            LocationString = "SDE",
                            Name = "Clínica Unión Médica del Norte",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("c8b0812e-7205-40ad-a249-fb9e6ae64c37"),
                            Details = "Ninguno",
                            HealthCenterCategory = "General",
                            LocationId = new Guid("d4e5f678-2345-3456-4567-890abcdef123"),
                            LocationString = "SDE",
                            Name = "Hospital General y de Especialidades Nuestra Señora de la Altagracia (HGENSA)",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("8b971b1f-3f6e-46a8-9b27-805af468bbb4"),
                            Details = "Ninguno",
                            HealthCenterCategory = "Specialized",
                            LocationId = new Guid("e5f67890-3456-4567-5678-90abcdef1234"),
                            LocationString = "SDE",
                            Name = "Centro Médico Cibao",
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11, 8)");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1c1b2c3-d4e5-678f-1234-56789abcdef0"),
                            EntityId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            EntityType = "HealthCenter",
                            Latitude = 18.4861m,
                            Longitude = -69.8791m,
                            MunicipalityId = new Guid("34567890-3456-3456-3456-34567890abcd"),
                            PostalCode = "10101",
                            ProvinceId = new Guid("23456789-2345-2345-2345-234567890abc"),
                            RegionId = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f678-1234-5678-abcdef123456"),
                            EntityId = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da"),
                            EntityType = "HealthCenter",
                            Latitude = 19.4517m,
                            Longitude = -70.1626m,
                            MunicipalityId = new Guid("65432109-6543-6543-6543-abcdef345678"),
                            PostalCode = "10202",
                            ProvinceId = new Guid("76543210-5432-5432-5432-abcdef234567"),
                            RegionId = new Guid("87654321-4321-4321-4321-abcdef123456"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-1234-5678-9abc-def123456789"),
                            EntityId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            EntityType = "HealthCenter",
                            Latitude = 19.4667m,
                            Longitude = -71.2992m,
                            MunicipalityId = new Guid("67890123-4567-5678-6789-abcdef890123"),
                            PostalCode = "10303",
                            ProvinceId = new Guid("56789012-3456-4567-5678-abcdef789012"),
                            RegionId = new Guid("45678901-2345-3456-4567-abcdef678901"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("d4e5f678-2345-3456-4567-890abcdef123"),
                            EntityId = new Guid("c8b0812e-7205-40ad-a249-fb9e6ae64c37"),
                            EntityType = "HealthCenter",
                            Latitude = 18.5398m,
                            Longitude = -69.9112m,
                            MunicipalityId = new Guid("87654321-0987-6543-2109-fedcba765432"),
                            PostalCode = "10404",
                            ProvinceId = new Guid("98765432-1098-7654-3210-fedcba876543"),
                            RegionId = new Guid("09876543-2109-8765-4321-fedcba987654"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("e5f67890-3456-4567-5678-90abcdef1234"),
                            EntityId = new Guid("8b971b1f-3f6e-46a8-9b27-805af468bbb4"),
                            EntityType = "HealthCenter",
                            Latitude = 19.1873m,
                            Longitude = -70.6872m,
                            MunicipalityId = new Guid("54321098-7654-3210-9876-fedcba432109"),
                            PostalCode = "10505",
                            ProvinceId = new Guid("65432109-8765-4321-0987-fedcba543210"),
                            RegionId = new Guid("76543210-9876-5432-1098-fedcba654321"),
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.MedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-6789-0123-abcdef456789"),
                            Description = "Dedicada a la atención médica de bebés, niños y adolescentes.",
                            Name = "Pediatría"
                        },
                        new
                        {
                            Id = new Guid("c2d3e4f5-a6b7-8901-2345-abcdef678901"),
                            Description = "Se especializa en el diagnóstico y tratamiento del sistema musculoesquelético.",
                            Name = "Ortopedia"
                        },
                        new
                        {
                            Id = new Guid("d3e4f5a6-b7c8-9012-3456-abcdef789012"),
                            Description = "Se centra en el diagnóstico y tratamiento de afecciones de la piel.",
                            Name = "Dermatología"
                        },
                        new
                        {
                            Id = new Guid("e4f5a6b7-c8d9-0123-4567-abcdef890123"),
                            Description = "Especializado en el diagnóstico y tratamiento del cáncer.",
                            Name = "Oncología"
                        },
                        new
                        {
                            Id = new Guid("f5a6b7c8-d9e0-1234-5678-abcdef901234"),
                            Description = "Dedicada a la salud y enfermedades del aparato reproductor femenino.",
                            Name = "Ginecología"
                        },
                        new
                        {
                            Id = new Guid("a6b7c8d9-e0f1-2345-6789-abcdef012345"),
                            Description = "Se centra en el diagnóstico, tratamiento y prevención de trastornos mentales, emocionales y del comportamiento.",
                            Name = "Psiquiatría"
                        },
                        new
                        {
                            Id = new Guid("b7c8d9e0-f1a2-3456-7890-abcdef123456"),
                            Description = "Se especializa en el cuidado médico y quirúrgico de los ojos y la visión.",
                            Name = "Oftalmología"
                        },
                        new
                        {
                            Id = new Guid("c8d9e0f1-a2b3-4567-8901-abcdef234567"),
                            Description = "Dedicada al diagnóstico y tratamiento de trastornos relacionados con las hormonas.",
                            Name = "Endocrinología"
                        },
                        new
                        {
                            Id = new Guid("d9e0f1a2-b3c4-5678-9012-abcdef345678"),
                            Description = "Se centra en el diagnóstico y tratamiento de los trastornos del sistema respiratorio.",
                            Name = "Neumología"
                        },
                        new
                        {
                            Id = new Guid("e0f1a2b3-c4d5-6789-0123-abcdef456789"),
                            Description = "Se especializa en el diagnóstico y tratamiento del aparato digestivo.",
                            Name = "Gastroenterología"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Products.LabTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("LabTests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d2a5e4c-8b3f-4a7d-9c5b-3f2e1b6a7d9c"),
                            Status = true,
                            TestCode = "H001",
                            TestName = "Hemograma Completo"
                        },
                        new
                        {
                            Id = new Guid("2b5d9a1c-4e7f-3a8c-6b9d-5f2a3e4b1f7a"),
                            Status = true,
                            TestCode = "P002",
                            TestName = "Perfil Lipídico"
                        },
                        new
                        {
                            Id = new Guid("ab3f3482-973d-4912-8848-f82bbb107792"),
                            Status = true,
                            TestCode = "B003",
                            TestName = "Biopsia de piel"
                        },
                        new
                        {
                            Id = new Guid("3c5d6e7f-89ab-4cde-bdef-3456789abcd0"),
                            Status = true,
                            TestCode = "M004",
                            TestName = "Examen microbiológico ocular"
                        },
                        new
                        {
                            Id = new Guid("0c8b53f4-6962-4f89-807e-737900741e13"),
                            Status = true,
                            TestCode = "R005",
                            TestName = "Radiografía de tórax"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Products.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Concentration")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugInteractions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Indications")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Precautions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RouteOfAdministration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Medications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2d1c5b7-8f4e-4a6b-9c3d-5e7a1b2c9f5d"),
                            ActiveIngredient = "Metformina",
                            Concentration = 500m,
                            Contraindications = "Insuficiencia renal severa, cetoacidosis diabética.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Mayor riesgo de acidosis láctica con alcohol.",
                            ImageUrl = "http://example.com/metformina.jpg",
                            Indications = "Tratamiento de la diabetes tipo 2.",
                            Name = "Metformina",
                            NationalCode = "M500",
                            Precautions = "Controlar función renal periódicamente.",
                            Presentation = "Caja con 30 tabletas de 500 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Náuseas, vómitos, diarrea, dolor abdominal.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("e6b5a3c7-9d4f-4a8b-7e1c-2d9f1a5b3c6d"),
                            ActiveIngredient = "Atorvastatina",
                            Concentration = 20m,
                            Contraindications = "Hipersensibilidad al principio activo, enfermedad hepática activa.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Mayor riesgo de miopatía con gemfibrozil o ciclosporina.",
                            ImageUrl = "http://example.com/atorvastatina.jpg",
                            Indications = "Reducción de niveles elevados de colesterol y triglicéridos.",
                            Name = "Atorvastatina",
                            NationalCode = "A020",
                            Precautions = "Controlar función hepática periódicamente.",
                            Presentation = "Caja con 30 tabletas de 20 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Dolor muscular, elevación de enzimas hepáticas.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("c3f4a6b7-8d1e-4b9c-2e7a-1c5b3d6f9e7a"),
                            ActiveIngredient = "Ibuprofeno",
                            Concentration = 400m,
                            Contraindications = "Úlcera péptica activa, insuficiencia renal severa.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Disminuye el efecto de los antihipertensivos.",
                            ImageUrl = "http://example.com/ibuprofeno.jpg",
                            Indications = "Alivio de dolor leve a moderado, fiebre.",
                            Name = "Ibuprofeno",
                            NationalCode = "I400",
                            Precautions = "Usar con precaución en pacientes con antecedentes de sangrado gastrointestinal.",
                            Presentation = "Caja con 20 tabletas de 400 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Náuseas, dispepsia, riesgo de sangrado gastrointestinal.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("f6b9a1c5-2e7a-3d6f-8d1e-4b3c7f9e7a1c"),
                            ActiveIngredient = "Amoxicilina",
                            Concentration = 500m,
                            Contraindications = "Hipersensibilidad a penicilinas.",
                            DosageForm = "Capsule",
                            DrugInteractions = "Disminuye la eficacia de anticonceptivos orales.",
                            ImageUrl = "http://example.com/amoxicilina.jpg",
                            Indications = "Tratamiento de infecciones bacterianas como faringitis y otitis media.",
                            Name = "Amoxicilina",
                            NationalCode = "A500",
                            Precautions = "Usar con precaución en pacientes con antecedentes de reacciones alérgicas.",
                            Presentation = "Caja con 12 cápsulas de 500 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Erupciones cutáneas, diarrea, náuseas.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("d7e1c5b3-8f4a-4b6c-9f9e-2a7a1d6f8e9a"),
                            ActiveIngredient = "Paracetamol",
                            Concentration = 120m,
                            Contraindications = "Insuficiencia hepática severa.",
                            DosageForm = "Syrup",
                            DrugInteractions = "Aumenta el riesgo de toxicidad hepática con alcohol.",
                            ImageUrl = "http://example.com/paracetamol.jpg",
                            Indications = "Alivio de fiebre y dolor leve a moderado.",
                            Name = "Paracetamol",
                            NationalCode = "P120",
                            Precautions = "Evitar dosis superiores a las recomendadas.",
                            Presentation = "Frasco de 120 mL con 120 mg/5mL.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Raro: reacciones alérgicas, daño hepático en sobredosis.",
                            Status = true,
                            UnitOfMeasurement = "mg/5mL"
                        },
                        new
                        {
                            Id = new Guid("c3a1a1e3-e2b5-42ac-8b34-358ea7745d6e"),
                            ActiveIngredient = "Ibuprofeno",
                            Concentration = 200m,
                            Contraindications = "Úlceras gástricas, insuficiencia renal.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Puede aumentar el riesgo de sangrado con anticoagulantes.",
                            ImageUrl = "http://example.com/ibuprofeno.jpg",
                            Indications = "Alivio de dolor leve a moderado y fiebre.",
                            Name = "Ibuprofeno",
                            NationalCode = "I200",
                            Precautions = "Administrar con alimentos para evitar malestar estomacal.",
                            Presentation = "Caja con 20 tabletas de 200 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Malestar estomacal, dolor de cabeza, mareos.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("f1c839fa-d3f8-433d-b6e3-e8d5296d22d9"),
                            ActiveIngredient = "Naproxeno",
                            Concentration = 250m,
                            Contraindications = "Úlceras gástricas, insuficiencia renal.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Aumenta el riesgo de sangrado con anticoagulantes.",
                            ImageUrl = "http://example.com/naproxeno.jpg",
                            Indications = "Alivio de dolor articular e inflamación.",
                            Name = "Naproxeno",
                            NationalCode = "N250",
                            Precautions = "Tomar con alimentos para reducir riesgo de irritación estomacal.",
                            Presentation = "Caja con 30 tabletas de 250 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Dolor estomacal, mareos, somnolencia.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("4b2c6894-cc7d-4565-bb18-aba013826de7"),
                            ActiveIngredient = "Sertralina",
                            Concentration = 50m,
                            Contraindications = "Hipersensibilidad a la sertralina, embarazo.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Puede interactuar con inhibidores de la monoaminooxidasa (IMAO).",
                            ImageUrl = "http://example.com/sertralina.jpg",
                            Indications = "Tratamiento de la depresión y trastornos de ansiedad.",
                            Name = "Sertralina",
                            NationalCode = "S50",
                            Precautions = "Uso con precaución en personas con antecedentes de trastornos convulsivos.",
                            Presentation = "Caja con 30 tabletas de 50 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Náuseas, insomnio, mareos.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("e4c9b8d4-9a5d-44d3-9be7-85e2e57b73c1"),
                            ActiveIngredient = "Losartán",
                            Concentration = 50m,
                            Contraindications = "Embarazo, lactancia, hipersensibilidad al losartán.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Interacción con diuréticos y otros antihipertensivos.",
                            ImageUrl = "http://example.com/losartan.jpg",
                            Indications = "Tratamiento para hipertensión y insuficiencia renal.",
                            Name = "Losartán",
                            NationalCode = "L50",
                            Precautions = "Controlar la función renal durante el tratamiento.",
                            Presentation = "Caja con 30 tabletas de 50 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Mareo, dolor de cabeza, hiperkalemia.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        },
                        new
                        {
                            Id = new Guid("3d69e605-c5e4-42f0-9f00-18f3a12f54ed"),
                            ActiveIngredient = "Glimepirida",
                            Concentration = 2m,
                            Contraindications = "Insuficiencia renal severa, cetoacidosis diabética.",
                            DosageForm = "Tablet",
                            DrugInteractions = "Interacción con otros medicamentos antidiabéticos.",
                            ImageUrl = "http://example.com/glimepirida.jpg",
                            Indications = "Tratamiento de la diabetes tipo 2.",
                            Name = "Glimepirida",
                            NationalCode = "G2",
                            Precautions = "Uso con precaución en personas con antecedentes de hipoglucemia.",
                            Presentation = "Caja con 30 tabletas de 2 mg.",
                            RouteOfAdministration = "Oral",
                            SideEffects = "Hipoglucemia, aumento de peso, mareos.",
                            Status = true,
                            UnitOfMeasurement = "mg"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ebacd99-687d-428a-b335-4a4ba0c0f2e0"),
                            Description = "Servicio de consulta médica general",
                            ImageURL = "https://example.com/images/general-consultation.jpg",
                            Name = "Consulta General"
                        },
                        new
                        {
                            Id = new Guid("59b84127-98ce-4e0d-9a67-ae091efaa11a"),
                            Description = "Servicio de atención a emergencias médicas",
                            ImageURL = "https://example.com/images/emergencies.jpg",
                            Name = "Emergencias"
                        },
                        new
                        {
                            Id = new Guid("21c7dfdc-d1de-4332-bbd3-e97ae1648e80"),
                            Description = "Servicio de imágenes médicas y radiografías",
                            ImageURL = "https://example.com/images/radiology.jpg",
                            Name = "Radiología"
                        },
                        new
                        {
                            Id = new Guid("e209b5b5-e5fc-4fb0-8247-6b66357da42f"),
                            Description = "Servicio de análisis de laboratorio",
                            ImageURL = "https://example.com/images/laboratory.jpg",
                            Name = "Laboratorio Clínico"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.DoctorMedicalSpecialty", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DoctorId", "MedicalSpecialtyId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("DoctorMedicalSpecialties", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("b1c2d3e4-f5a6-6789-0123-abcdef456789"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("c2d3e4f5-a6b7-8901-2345-abcdef678901"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("d3e4f5a6-b7c8-9012-3456-abcdef789012"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            MedicalSpecialtyId = new Guid("d3e4f5a6-b7c8-9012-3456-abcdef789012"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            MedicalSpecialtyId = new Guid("e4f5a6b7-c8d9-0123-4567-abcdef890123"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            MedicalSpecialtyId = new Guid("f5a6b7c8-d9e0-1234-5678-abcdef901234"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("a6b7c8d9-e0f1-2345-6789-abcdef012345"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("b7c8d9e0-f1a2-3456-7890-abcdef123456"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            MedicalSpecialtyId = new Guid("c8d9e0f1-a2b3-4567-8901-abcdef234567"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            MedicalSpecialtyId = new Guid("d9e0f1a2-b3c4-5678-9012-abcdef345678"),
                            Status = false
                        },
                        new
                        {
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            MedicalSpecialtyId = new Guid("e0f1a2b3-c4d5-6789-0123-abcdef456789"),
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.HealthCenterServices", b =>
                {
                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("HealthCenterId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("HealthCenterServices", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.MedicationCoverage", b =>
                {
                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CoinsurancePercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("CopayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("PriorAuthorizationRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("MedicationId", "HealthInsuranceId");

                    b.HasIndex("HealthInsuranceId");

                    b.ToTable("MedicationCoverages", (string)null);

                    b.HasData(
                        new
                        {
                            MedicationId = new Guid("a2d1c5b7-8f4e-4a6b-9c3d-5e7a1b2c9f5d"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            CoinsurancePercentage = 80m,
                            CopayAmount = 50m,
                            PriorAuthorizationRequired = true,
                            Status = true
                        },
                        new
                        {
                            MedicationId = new Guid("e6b5a3c7-9d4f-4a8b-7e1c-2d9f1a5b3c6d"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            CoinsurancePercentage = 90m,
                            CopayAmount = 70m,
                            PriorAuthorizationRequired = false,
                            Status = true
                        },
                        new
                        {
                            MedicationId = new Guid("c3f4a6b7-8d1e-4b9c-2e7a-1c5b3d6f9e7a"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            CoinsurancePercentage = 40m,
                            CopayAmount = 20m,
                            PriorAuthorizationRequired = false,
                            Status = true
                        },
                        new
                        {
                            MedicationId = new Guid("f6b9a1c5-2e7a-3d6f-8d1e-4b3c7f9e7a1c"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            CoinsurancePercentage = 60m,
                            CopayAmount = 30m,
                            PriorAuthorizationRequired = true,
                            Status = true
                        },
                        new
                        {
                            MedicationId = new Guid("d7e1c5b3-8f4a-4b6c-9f9e-2a7a1d6f8e9a"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            CoinsurancePercentage = 50m,
                            CopayAmount = 10m,
                            PriorAuthorizationRequired = false,
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientAllergy", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AllergyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllergicReaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.HasIndex("MedicalConsultationId");

                    b.ToTable("PatientAllergies", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            AllergyId = new Guid("33c7785e-58f4-4ab8-9f54-51bf8978963f"),
                            Allergen = "Polen",
                            AllergicReaction = "Congestión nasal y estornudos",
                            Description = "Reacción alérgica leve al polen durante la primavera.",
                            DiagnosisDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            AllergyId = new Guid("b0fa92b6-1a21-4e9e-845e-e2d5bbfe5e1d"),
                            Allergen = "Maní",
                            AllergicReaction = "Dificultad para respirar y urticaria",
                            Description = "Reacción severa a la exposición al maní.",
                            DiagnosisDate = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("2c4f7b60-71a9-4ea8-82f1-7f3c0dbed832"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            AllergyId = new Guid("33c7785e-58f4-4ab8-9f54-51bf8978963f"),
                            Allergen = "Ácaros del polvo",
                            AllergicReaction = "Estornudos frecuentes y congestión nasal",
                            Description = "Reacción moderada al polvo en casa.",
                            DiagnosisDate = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("8f7319e7-89b4-4d5c-90cb-cf2e5a0c9fbd"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("83d48d7c-6a56-4233-9934-9d30bde63bb5"),
                            AllergyId = new Guid("b0fa92b6-1a21-4e9e-845e-e2d5bbfe5e1d"),
                            Allergen = "Lácteos",
                            AllergicReaction = "Dolor abdominal y náuseas",
                            Description = "Reacción leve a productos lácteos.",
                            DiagnosisDate = new DateTime(2019, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("9c87b12f-d892-4f2b-8e2c-5347c8c1b056"),
                            AllergyId = new Guid("33c7785e-58f4-4ab8-9f54-51bf8978963f"),
                            Allergen = "Polen de flores",
                            AllergicReaction = "Picazón en los ojos y congestión nasal",
                            Description = "Reacción alérgica durante la primavera.",
                            DiagnosisDate = new DateTime(2021, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            AllergyId = new Guid("b0fa92b6-1a21-4e9e-845e-e2d5bbfe5e1d"),
                            Allergen = "Gluten",
                            AllergicReaction = "Diarrea y fatiga",
                            Description = "Reacción leve a alimentos con gluten.",
                            DiagnosisDate = new DateTime(2020, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientDiscapacity", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "DiscapacityId");

                    b.HasIndex("DiscapacityId");

                    b.HasIndex("MedicalConsultationId");

                    b.ToTable("PatientDiscapacities", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            DiscapacityId = new Guid("1b54e13f-7a32-4cc1-ad6d-35298426a2fb"),
                            Description = "El paciente presenta dificultades visuales complejas.",
                            DiagnosisDate = new DateTime(2018, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            Severity = "Severa",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            DiscapacityId = new Guid("5c52a9d3-6ee2-496e-a922-139de857d9d4"),
                            Description = "El paciente presenta pérdida auditiva moderada desde el nacimiento.",
                            DiagnosisDate = new DateTime(2020, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("2c4f7b60-71a9-4ea8-82f1-7f3c0dbed832"),
                            Severity = "Moderada",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            DiscapacityId = new Guid("1b54e13f-7a32-4cc1-ad6d-35298426a2fb"),
                            Description = "El paciente requiere soporte para tareas visuales prolongadas.",
                            DiagnosisDate = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            Severity = "Leve",
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientHealthInsurance", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "HealthInsuranceId");

                    b.HasIndex("HealthInsuranceId");

                    b.ToTable("PatientHealthInsurances", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            PolicyNumber = "P0123456789",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            PolicyNumber = "P0987654321",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            PolicyNumber = "P1234567890",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            PolicyNumber = "P2345678901",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            PolicyNumber = "P3456789012",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            PolicyNumber = "P4567890123",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            PolicyNumber = "P5678901234",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("83d48d7c-6a56-4233-9934-9d30bde63bb5"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            PolicyNumber = "P6789012345",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("9c87b12f-d892-4f2b-8e2c-5347c8c1b056"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            PolicyNumber = "P7890123456",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            HealthInsuranceId = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            PolicyNumber = "P8901234567",
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            HealthInsuranceId = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            PolicyNumber = "P9012345678",
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientIllness", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IllnessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("Date");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Activo");

                    b.HasKey("PatientId", "IllnessId");

                    b.HasIndex("IllnessId");

                    b.HasIndex("MedicalConsultationId");

                    b.ToTable("PatientIllnesses", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            IllnessId = new Guid("1097ba6f-7f4d-4fcc-ae34-f89cf70930a4"),
                            DiagnosisDate = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentURL = "https://example.com/document/skin-pigmentation.pdf",
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            Notes = "El paciente está bajo monitoreo y tratamiento tópico para los cambios en la pigmentación de la piel.",
                            Status = "Activa"
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            IllnessId = new Guid("99c26293-7562-4d6a-9aa1-260bedb215a6"),
                            DiagnosisDate = new DateTime(2021, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentURL = "https://example.com/document/pulmonary-edema.pdf",
                            MedicalConsultationId = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            Notes = "Paciente respondió favorablemente a la terapia diurética.",
                            Status = "En remisión"
                        },
                        new
                        {
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            IllnessId = new Guid("7791a6c3-b96b-4fd2-8777-1fabc70a3911"),
                            DiagnosisDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentURL = "https://example.com/document/endoftalmitis-diagnosis.pdf",
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            Notes = "Tratamiento antibiótico y seguimiento con oftalmología especializado.",
                            Status = "Activa"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientLabTestPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InvalidationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LabTechId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SolicitedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabTechId");

                    b.HasIndex("LabTestId");

                    b.HasIndex("MedicalConsultationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientLabTestPrescriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2d5c7a1-3e4b-8f9d-1a2c-6b3e5d9f4c7a"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            LabTechId = new Guid("a3c9e2d7-b43f-44c1-a657-d5e5fa9a5b5c"),
                            LabTestId = new Guid("ab3f3482-973d-4912-8848-f82bbb107792"),
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            PerformedDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResultUrl = "http://example.com/results-skin.pdf",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("96fdb47b-e0ad-48c6-868d-0451f4d297b2"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            LabTechId = new Guid("d8f1e9b3-42a1-44d5-8f3b-6c7a9e5f6d4a"),
                            LabTestId = new Guid("0c8b53f4-6962-4f89-807e-737900741e13"),
                            MedicalConsultationId = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            PerformedDate = new DateTime(2024, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResultUrl = "http://example.com/results-pulmonary-edema.pdf",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("34a6c639-f539-4eb4-b19a-82a8c0cc2a49"),
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            LabTechId = new Guid("b4c3d9e1-2a7f-44c3-a9b1-f5e6c7a8d9f4"),
                            LabTestId = new Guid("3c5d6e7f-89ab-4cde-bdef-3456789abcd0"),
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            PerformedDate = new DateTime(2019, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResultUrl = "http://example.com/results-endoftalmitis.pdf",
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientMedicationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicalConsultationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalConsultationId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationPrescription", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6b151ef-3486-4390-860e-3edfb672737a"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            EndDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            MedicationId = new Guid("a2d1c5b7-8f4e-4a6b-9c3d-5e7a1b2c9f5d"),
                            Notes = "Iniciar tratamiento para controlar la glucosa.",
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("fac7042b-f226-4567-b0f7-b8f457711b1a"),
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            EndDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("2c4f7b60-71a9-4ea8-82f1-7f3c0dbed832"),
                            MedicationId = new Guid("c3a1a1e3-e2b5-42ac-8b34-358ea7745d6e"),
                            Notes = "Tratamiento para el dolor abdominal severo y fiebre.",
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("cb299f86-45a8-4ef4-9061-921cf329db90"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("8f7319e7-89b4-4d5c-90cb-cf2e5a0c9fbd"),
                            MedicationId = new Guid("f1c839fa-d3f8-433d-b6e3-e8d5296d22d9"),
                            Notes = "Medicamento para el dolor articular y la inflamación.",
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            StartDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("b74ac408-bcaf-4144-8326-dd8da6e70860"),
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            EndDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            MedicationId = new Guid("4b2c6894-cc7d-4565-bb18-aba013826de7"),
                            Notes = "Tratamiento para depresión y ansiedad.",
                            PatientId = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            StartDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("381b275d-bdbe-4b11-9c31-334893bf0f66"),
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("8f7319e7-89b4-4d5c-90cb-cf2e5a0c9fbd"),
                            MedicationId = new Guid("e4c9b8d4-9a5d-44d3-9be7-85e2e57b73c1"),
                            Notes = "Tratamiento para hipertensión.",
                            PatientId = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ca14319d-a930-4c8d-971c-58edafd4477e"),
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            EndDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            MedicationId = new Guid("3d69e605-c5e4-42f0-9f00-18f3a12f54ed"),
                            Notes = "Control de glucosa en paciente con diabetes tipo 2.",
                            PatientId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientRiskFactor", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskFactorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosisDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Activo");

                    b.HasKey("PatientId", "RiskFactorId");

                    b.HasIndex("MedicalConsultationId");

                    b.HasIndex("RiskFactorId");

                    b.ToTable("PatientRiskFactors", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            RiskFactorId = new Guid("a34f2c12-d4b6-42e9-8f7a-9012c3e4f567"),
                            DiagnosisDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            Status = "Activo"
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            RiskFactorId = new Guid("b78f3e45-c5d6-47e1-a9f8-3456d7e8f901"),
                            DiagnosisDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            Status = "En tratamiento"
                        },
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            RiskFactorId = new Guid("c98f4e56-d7f8-489a-b9e1-4567e8f9a012"),
                            DiagnosisDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            Status = "Activo"
                        },
                        new
                        {
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            RiskFactorId = new Guid("f45f7e89-a1c2-4b5d-bcde-67890a1b2345"),
                            DiagnosisDate = new DateTime(2020, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalConsultationId = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            Status = "Activo"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientVaccine", b =>
                {
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppliedDoses")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastApplicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("MedicalConsultationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("PatientId", "VaccineId");

                    b.HasIndex("MedicalConsultationId");

                    b.HasIndex("VaccineId");

                    b.ToTable("PatientVaccines", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            VaccineId = new Guid("308c146a-7b3e-4426-b394-971aad7e50bb"),
                            AppliedDoses = 2,
                            LastApplicationDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            VaccineId = new Guid("04561950-934c-47d9-a4df-55daa2143135"),
                            AppliedDoses = 1,
                            LastApplicationDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            VaccineId = new Guid("9c7bed88-e92c-459d-8a50-2fd9041c2c26"),
                            AppliedDoses = 3,
                            LastApplicationDate = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            VaccineId = new Guid("ff079100-01b3-4902-86b0-64083d72c6fe"),
                            AppliedDoses = 2,
                            LastApplicationDate = new DateTime(2020, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            VaccineId = new Guid("d8d4c92b-a7d9-4205-8524-829ef5ca97d7"),
                            AppliedDoses = 2,
                            LastApplicationDate = new DateTime(2021, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            HealthCenterId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Assistant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Assistants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            HealthCenterId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentlyWorkingHealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentlyWorkingHealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            CurrentlyWorkingHealthCenterId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            LicenseNumber = "LIC12345678",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            CurrentlyWorkingHealthCenterId = new Guid("c8b0812e-7205-40ad-a249-fb9e6ae64c37"),
                            LicenseNumber = "LIC98765432",
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.LabTech", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("LabTechs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3c9e2d7-b43f-44c1-a657-d5e5fa9a5b5c"),
                            HealthCenterId = new Guid("c8b0812e-7205-40ad-a249-fb9e6ae64c37"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("d8f1e9b3-42a1-44d5-8f3b-6c7a9e5f6d4a"),
                            HealthCenterId = new Guid("8b971b1f-3f6e-46a8-9b27-805af468bbb4"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("b4c3d9e1-2a7f-44c3-a9b1-f5e6c7a8d9f4"),
                            HealthCenterId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            Status = true
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodTypeLabResultURl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<Guid?>("PrimaryCarePhysicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PrimaryCarePhysicianId");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            BloodType = "A+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/mark-abreu",
                            EmergencyContactName = "Maria Abreu",
                            EmergencyContactPhone = "809-123-4567",
                            Height = 172.5m,
                            Status = false,
                            Weight = 70.0m
                        },
                        new
                        {
                            Id = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            BloodType = "O-",
                            BloodTypeLabResultURl = "http://example.com/lab-results/alice-smith",
                            EmergencyContactName = "John Smith",
                            EmergencyContactPhone = "809-987-6543",
                            Height = 160.3m,
                            Status = false,
                            Weight = 55.0m
                        },
                        new
                        {
                            Id = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            BloodType = "B+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/geremy-ferran",
                            EmergencyContactName = "Ana Ferrán",
                            EmergencyContactPhone = "829-123-1111",
                            Height = 175.8m,
                            Status = false,
                            Weight = 78.5m
                        },
                        new
                        {
                            Id = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            BloodType = "AB+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/brahiam-montero",
                            EmergencyContactName = "Luis Montero",
                            EmergencyContactPhone = "829-222-3333",
                            Height = 182.0m,
                            Status = false,
                            Weight = 85.2m
                        },
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            BloodType = "O+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/ana-martinez",
                            EmergencyContactName = "John Martinez",
                            EmergencyContactPhone = "829-123-9811",
                            Height = 165.0m,
                            Status = false,
                            Weight = 60.0m
                        },
                        new
                        {
                            Id = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            BloodType = "A+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/isaac-polonio",
                            EmergencyContactName = "Alex Polonio",
                            EmergencyContactPhone = "829-123-9812",
                            Height = 180.0m,
                            Status = false,
                            Weight = 85.0m
                        },
                        new
                        {
                            Id = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            BloodType = "B-",
                            BloodTypeLabResultURl = "http://example.com/lab-results/layla-vargas",
                            EmergencyContactName = "Sophia Vargas",
                            EmergencyContactPhone = "829-123-9231",
                            Height = 162.0m,
                            Status = false,
                            Weight = 58.0m
                        },
                        new
                        {
                            Id = new Guid("83d48d7c-6a56-4233-9934-9d30bde63bb5"),
                            BloodType = "AB+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/maria-lopez",
                            EmergencyContactName = "Ana Lopez",
                            EmergencyContactPhone = "809-987-6543",
                            Height = 170.0m,
                            Status = false,
                            Weight = 65.0m
                        },
                        new
                        {
                            Id = new Guid("9c87b12f-d892-4f2b-8e2c-5347c8c1b056"),
                            BloodType = "O-",
                            BloodTypeLabResultURl = "http://example.com/lab-results/carlos-gonzalez",
                            EmergencyContactName = "Luis Gonzalez",
                            EmergencyContactPhone = "809-234-5678",
                            Height = 178.0m,
                            Status = false,
                            Weight = 80.0m
                        },
                        new
                        {
                            Id = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            BloodType = "A-",
                            BloodTypeLabResultURl = "http://example.com/lab-results/ana-martinez",
                            EmergencyContactName = "John Martinez",
                            EmergencyContactPhone = "809-876-5432",
                            Height = 165.0m,
                            Status = false,
                            Weight = 60.0m
                        },
                        new
                        {
                            Id = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            BloodType = "B+",
                            BloodTypeLabResultURl = "http://example.com/lab-results/luis-santos",
                            EmergencyContactName = "Carlos Santos",
                            EmergencyContactPhone = "809-321-9876",
                            Height = 172.0m,
                            Status = false,
                            Weight = 78.0m
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Registrator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Registrators", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a5b"),
                            HealthCenterId = new Guid("85bc224a-c53f-41db-97b8-92f703ee4452"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("83d48d7c-6a56-4233-9934-9d30bde63bb5"),
                            HealthCenterId = new Guid("57efafa6-1eec-4228-b7c1-ab87fe2097da"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("9c87b12f-d892-4f2b-8e2c-5347c8c1b056"),
                            HealthCenterId = new Guid("deb707b2-50f1-4245-9f8d-12a3b6e74933"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            HealthCenterId = new Guid("c8b0812e-7205-40ad-a249-fb9e6ae64c37"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            HealthCenterId = new Guid("8b971b1f-3f6e-46a8-9b27-805af468bbb4"),
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f86a1609-cb84-4d6a-8d8a-8e49b6b9a5b9"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608647",
                            ConcurrencyStamp = "2c437370-0091-4dea-8efd-200e5ea16a7d",
                            Email = "brahiam@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Brahiam",
                            ImageUrl = ".",
                            LastName = "Montero",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIhh+UcQ21L8qCJmeHa7Ya8/QH66ZEZ7UM+WvPLdLRR5L9qVvPUdOXeM8CPB2kYeNQ==",
                            PhoneNumber = "809-962-2004",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "973eece8-0212-423e-a83f-8b3e0d9ca198",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        },
                        new
                        {
                            Id = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40208899928",
                            ConcurrencyStamp = "e1049153-5ef4-471c-bf70-3d94866fa838",
                            Email = "geremy@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Geremy",
                            ImageUrl = ".",
                            LastName = "Ferrán",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOn9eiBMyJrIQGg6EUO4mwtqHqR33ljug6h4FZNZNNxPGQCzAAlbEeJSKktLHAVTow==",
                            PhoneNumber = "829-143-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d0b0c38d-2fb5-4bd7-980b-b09f920311da",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        },
                        new
                        {
                            Id = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608641",
                            ConcurrencyStamp = "19eb32af-1d2a-4203-8d7d-22ed553e6a60",
                            Email = "patient@email.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            ImageUrl = ".",
                            LastName = "Abreu",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELUA79m0PThZev8efkMHljzWXDhV4AwTeYCEdlAFq1yoM0JMOKyC6HxZGbbzoBHWYw==",
                            PhoneNumber = "829-163-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3d5964ac-3dd0-4551-8c4d-e437a0aa0aa4",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        },
                        new
                        {
                            Id = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608648",
                            ConcurrencyStamp = "24ec3cbb-df28-41f3-821e-58474b167a72",
                            Email = "alicepatient@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            ImageUrl = ".",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEY72VhzncZGuTdpuxtO2owBLNoMepHX20SDVqoNXCAi4ShOwvwSOaNtrVb8vsl3Eg==",
                            PhoneNumber = "829-128-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e4384e09-b675-4029-b75c-29dd7d5963d4",
                            Sex = "F",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a8b"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1995, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "0987634321",
                            ConcurrencyStamp = "62c2b8a0-3037-4d1e-96aa-3af1118d4fb8",
                            Email = "assistantuser@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            ImageUrl = ".",
                            LastName = "Martínez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH8aLUMkX+JHbdtt23anNqASdu8La8aa5FtO9g7b/z4E3P0W170lPDJLpqUNDLoyDQ==",
                            PhoneNumber = "829-123-9811",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0fae4379-12f4-4b50-8ba9-8f3c42329f51",
                            Sex = "F",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "assistantuser"
                        },
                        new
                        {
                            Id = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "40211608640",
                            ConcurrencyStamp = "6eeb41ce-ae97-4f6b-84d4-95a2964c9392",
                            Email = "isaac@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Isaac Alexander",
                            ImageUrl = ".",
                            LastName = "Polonio",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFwENDlJDRVrKNXiTSIYc1VfiSUbNeracf5mbEJ8jFhaq+3KmkDVJgcds660Ivv7hw==",
                            PhoneNumber = "829-123-9812",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6cff452d-8118-4263-b60c-3add13dc8f74",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1975, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "0987654321",
                            ConcurrencyStamp = "f7f87afb-93e3-49c0-a4ad-c7d9af7558b8",
                            Email = "layladoc@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Layla",
                            ImageUrl = ".",
                            LastName = "Vargas",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDrT8UhKdlIwt7O08jKLqbg2ynObfEUJCbC/7W89vqfQU5cLVVdbK1c7GsRr7zmjBA==",
                            PhoneNumber = "829-123-9231",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3167b9e3-0713-4478-a13e-38d13d2a70a3",
                            Sex = "F",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "doctor2"
                        },
                        new
                        {
                            Id = new Guid("37439d05-9b3b-4896-88e0-4ee7b7221a5b"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1995, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "0587654321",
                            ConcurrencyStamp = "47950ca8-61d7-45f1-9bf5-4a0eb1227b0f",
                            Email = "registrator@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Gilthong Emmanuel",
                            ImageUrl = ".",
                            LastName = "Palin Garcia",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEODs1unb5nSu3fZQ8IUfuqJwfiZ4ToryizfbokEhLlYNXSunc41+yl7Y1C2gz5H+QQ==",
                            PhoneNumber = "829-123-9312",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "acf615af-b17c-4ae6-b37c-84b444fdc5f3",
                            Sex = "M",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "digitaregistrator"
                        },
                        new
                        {
                            Id = new Guid("83d48d7c-6a56-4233-9934-9d30bde63bb5"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1988, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "1122334455",
                            ConcurrencyStamp = "f3524587-2deb-46f8-bcf5-0d47f591bc7e",
                            Email = "registrator.cdm@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Maria",
                            ImageUrl = ".",
                            LastName = "Lopez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOpahLCs/XmhmH85skoVeAwJ/dBXwlsXBFDflO2KrZONsGhEK7nU8xOeXdv29GFiRA==",
                            PhoneNumber = "809-987-6543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "52da3bcb-784f-47ae-98f4-d686cc09238d",
                            Sex = "F",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "registrator_cdm"
                        },
                        new
                        {
                            Id = new Guid("9c87b12f-d892-4f2b-8e2c-5347c8c1b056"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "3344556677",
                            ConcurrencyStamp = "c882b001-c58b-43a5-a8dd-c66d09cbbb4c",
                            Email = "registrator.union@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            ImageUrl = ".",
                            LastName = "Gonzalez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHBef5VB4W7B6BKNZdpYFTF4Y+2LwuJycrdkbQAoN7FQc74UHoL12u5oKkkR1PhzdA==",
                            PhoneNumber = "809-254-5678",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "40826057-1eef-41de-af6b-06fe72c9ada7",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "registrator_union"
                        },
                        new
                        {
                            Id = new Guid("b7e1e44d-72c9-4c91-a933-9e4f0e6b5f11"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1992, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "4455667788",
                            ConcurrencyStamp = "12a5a6f9-6aa5-48e0-be6b-67bb7e3cdd86",
                            Email = "registrator.altagracia@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            ImageUrl = ".",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIOZ6k6HMZUlbXvvQdPDnyocq1wgXCV+el+wuu0hE17W9ShUoLWqp6Zj6U34j8UX6Q==",
                            PhoneNumber = "809-876-5432",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8ff6ea8a-2760-41e2-b459-707e2720b526",
                            Sex = "F",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "registrator_altagracia"
                        },
                        new
                        {
                            Id = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1980, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "5566778899",
                            ConcurrencyStamp = "1c5af0ac-2df7-42a2-902c-b0ef39587adf",
                            Email = "registrator.cibao@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Luis",
                            ImageUrl = ".",
                            LastName = "Santos",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEB/ko3xKCkmGmy9Yj+iPtjn5GdoVTBfWM1JQ6L/l8b+lsmSD8qV0R2aFvW+/RuhOSQ==",
                            PhoneNumber = "809-321-9876",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "26f72bdf-33ad-4248-ad76-f0838f3a74fb",
                            Sex = "M",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "registrator_cibao"
                        },
                        new
                        {
                            Id = new Guid("a3c9e2d7-b43f-44c1-a657-d5e5fa9a5b5c"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "12345678901",
                            ConcurrencyStamp = "698bf1b8-09d6-4671-a48f-c7fd3eabeca8",
                            Email = "carlos@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            ImageUrl = ".",
                            LastName = "Perez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN8P1BSpIgsvL+JGO3eZ9E7tiBjAtyLI9qr50xi1IsNa9AJZoUKJXHK6QSokHGRptA==",
                            PhoneNumber = "809-123-4567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1ed53614-705f-415c-bf9a-33b91b3cfbd2",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "tech1user"
                        },
                        new
                        {
                            Id = new Guid("d8f1e9b3-42a1-44d5-8f3b-6c7a9e5f6d4a"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "98765432101",
                            ConcurrencyStamp = "f97b89c7-aee2-46de-9fa0-7d45840bf34d",
                            Email = "maria@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Maria",
                            ImageUrl = ".",
                            LastName = "Lopez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDBqZDWLLCtd/Txu32SpKJvxqTANNXzJWGlUfUvbvXNmr0WPKKsNyZ1F1W11KBBjmw==",
                            PhoneNumber = "809-234-4678",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2a3a9919-2e97-4454-8dac-b4f2181868aa",
                            Sex = "F",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "tech2user"
                        },
                        new
                        {
                            Id = new Guid("b4c3d9e1-2a7f-44c3-a9b1-f5e6c7a8d9f4"),
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CardId = "13579246801",
                            ConcurrencyStamp = "d628655c-0210-4745-a337-965b1fedcff3",
                            Email = "luis@sedis.com",
                            EmailConfirmed = true,
                            FirstName = "Luis",
                            ImageUrl = ".",
                            LastName = "Gomez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENhDUDq5BVM9cSJVWDESwTalYHxg1hxgKGEbqWEoUsNFGzALlE7uwXmxWhMV+SPH5w==",
                            PhoneNumber = "809-345-6789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c5377926-6705-4349-9ad3-fd03c03bd4e3",
                            Sex = "M",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "tech3user"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33c7785e-58f4-4ab8-9f54-51bf8978963f"),
                            Description = "Inflamación de las vías nasales provocada por alérgenos a los que la persona afectada ha sido previamente sensibilizada. Su patogenia es una alergia de tipo I en la mucosa nasal. Los antígenos inhalados en la mucosa nasal sensibilizada se unen a los anticuerpos IgE en los mastocitos, que liberan mediadores químicos como la histamina y péptido leucotrieno. Como consecuencia de ello, las terminales de las neuronas sensitivas y los vasos reaccionan para inducir estornudos, rinorrea y congestión nasal (reacción de la fase inmediata). En la reacción de la fase tardía, los mastocitos producen diversos mediadores químicos, lo linfocitos Th2 y los mastocitos producen citocinas, y las células epiteliales, las células endoteliales vasculares y los fibrocitos producen quimiocinas. Estos transmisores derivados de células realmente inducen infiltración de la mucosa nasal por células inflamatorias de diversos tipos. Entre estos tipos celulares, los eosinófilos activados son los principales responsables de la inflamación de la mucosa y la hiperreactividad.\r\n",
                            IcdCode = "CA08",
                            Title = "Rinitis alérgica"
                        },
                        new
                        {
                            Id = new Guid("b0fa92b6-1a21-4e9e-845e-e2d5bbfe5e1d"),
                            Description = "Efectos adversos de los alimentos o los aditivos alimentarios que se asemejan clínicamente a la alergia. La alergia alimentaria es una reacción adversa a los alimentos mediada por un mecanismo inmunitario, ya sea con implicación de IgE específica (mediada por IgE), mecanismos mediados por células (no mediada por IgE) o mecanismos mixtos mediados tanto por células como por IgE.",
                            IcdCode = "4A85.2",
                            Title = "Hipersensibilidad alimentaria"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Family_History.FamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RelativeId");

                    b.ToTable("FamilyHistories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b54e13f-7a32-4cc1-ad6d-35298426a2fb"),
                            Condition = "",
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            Relationship = "Mother",
                            RelativeId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("5c52a9d3-6ee2-496e-a922-139de857d9d4"),
                            Condition = "",
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            Relationship = "Son",
                            RelativeId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("d7446d5f-93b0-4c94-8e10-ba5567f50b7b"),
                            Condition = "",
                            PatientId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            Relationship = "Aunt",
                            RelativeId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            Status = false
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalConsultations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d2e7a36-91e8-4b4a-a769-854fa9d4cb29"),
                            AppointmentId = new Guid("792b5eb8-35dc-4e11-8d36-bb4b0344f582"),
                            CreatedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(682),
                            CurrentHistory = "Patient reports persistent issues with vision clarity and difficulty reading fine print over the past three months.",
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            LastModifiedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(691),
                            PatientId = new Guid("c7f1d0d1-2b5f-4e77-a2a8-4b5d06d75950"),
                            PhysicalExamination = "Observed squinting during visual acuity tests. Referral to ophthalmology recommended.",
                            ReasonForVisit = "Difficulty reading and focusing on objects.",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("2c4f7b60-71a9-4ea8-82f1-7f3c0dbed832"),
                            AppointmentId = new Guid("0c8b4a52-f34c-4a7f-90d2-3c84d8c1d6b1"),
                            CreatedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(696),
                            CurrentHistory = "Patient reports mild discomfort and fatigue in the eyes after working on a computer for extended periods.",
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            LastModifiedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(697),
                            PatientId = new Guid("e2a4d5b6-3c9a-47bc-8db1-cd327a2f92d6"),
                            PhysicalExamination = "Visual acuity slightly reduced in low light. Suggested blue light filtering glasses and breaks during screen usage.",
                            ReasonForVisit = "Eye strain during extended screen time.",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("8f7319e7-89b4-4d5c-90cb-cf2e5a0c9fbd"),
                            AppointmentId = new Guid("d6c8a3b4-a72f-45df-9143-17c8b3d2fdf0"),
                            CreatedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(702),
                            CurrentHistory = "Patient reports difficulty hearing in noisy environments. Speech development has been slower than expected.",
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            LastModifiedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(703),
                            PatientId = new Guid("9c87b12f-d892-4f2b-8e2c-5347c8c1b056"),
                            PhysicalExamination = "Hearing tests confirm moderate hearing loss. Advised evaluation for hearing aids and speech therapy.",
                            ReasonForVisit = "Hearing difficulties and speech development concerns.",
                            Status = "Ongoing"
                        },
                        new
                        {
                            Id = new Guid("3d4e8a71-17a5-45c7-bec6-a7934c0425bc"),
                            AppointmentId = new Guid("12345678-90ab-cdef-1234-567890abcdef"),
                            CreatedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(707),
                            CurrentHistory = "Paciente reporta episodios de disnea y fatiga tras actividades leves.",
                            DoctorId = new Guid("b2f7d5b4-2f4d-4b2b-a292-1b9b65d5d6c0"),
                            LastModifiedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(707),
                            PatientId = new Guid("d8e2f93f-3b9f-4b88-981f-56eaa8ddc3e9"),
                            PhysicalExamination = "Estertores crepitantes en ambos campos pulmonares.",
                            ReasonForVisit = "Dificultades respiratorias persistentes.",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("7a8b5e23-3f6b-4315-bf4e-8b7e1a5b15bc"),
                            AppointmentId = new Guid("09876543-21dc-ba98-7654-3210fedcba98"),
                            CreatedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(713),
                            CurrentHistory = "Paciente refiere inicio agudo de dolor ocular intenso, acompañado de visión borrosa.",
                            DoctorId = new Guid("e9f7a7e1-f0d2-4f2c-bcb9-3e1a5a7a1e0b"),
                            LastModifiedDate = new DateTime(2024, 12, 1, 20, 38, 37, 107, DateTimeKind.Utc).AddTicks(714),
                            PatientId = new Guid("ea48eb4c-01c4-44d2-a81f-fc9246d2ec20"),
                            PhysicalExamination = "Inflamación severa en cámara anterior, opacidades vítreas observadas.",
                            ReasonForVisit = "Dolor ocular y disminución de visión.",
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discapacities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b54e13f-7a32-4cc1-ad6d-35298426a2fb"),
                            Description = "Grupo de disfunciones visuales que implican interacciones con otros sistemas sensitivos y motores. Reflejan los efectos combinados en todas las etapas de procesamiento.\r\n",
                            IcdCode = "9D93",
                            Title = "Disfunciones complejas relacionadas con la visión"
                        },
                        new
                        {
                            Id = new Guid("5c52a9d3-6ee2-496e-a922-139de857d9d4"),
                            Description = "Hay genes dominantes y recesivos que pueden causar una discapacidad de leve a profunda. Si una familia posee un gen de la sordera dominante, el gen persistirá a lo largo de las generaciones porque basta con que se herede de un solo progenitor para que se manifieste en la descendencia. En cambio, si una familia tiene una discapacidad auditiva genética causada por un gen recesivo, este no siempre se manifestará, puesto que ello ocurre solo cuando ambos padres lo transmiten a sus descendientes. La discapacidad auditiva se produce antes de la adquisición del lenguaje por tratarse de una afección congénita.\r\n",
                            IcdCode = "AB50",
                            Title = "Deficiencia auditiva congénita"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Illnesses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1097ba6f-7f4d-4fcc-ae34-f89cf70930a4"),
                            Description = "Alteraciones del color de la piel debidas a la ingestión o la inyección de un medicamento. Pueden obedecer a diferentes mecanismos, como el color del propio medicamento, una alteración de la melanización cutánea o el depósito de pigmentos por productos de degradación del fármaco.",
                            IcdCode = "EH70",
                            Title = "Alteraciones pigmentarias de la piel por medicamentos"
                        },
                        new
                        {
                            Id = new Guid("99c26293-7562-4d6a-9aa1-260bedb215a6"),
                            Description = "Afección causada por un exceso de líquido en los pulmones. Este líquido se acumula en los numerosos sacos alveolares de los pulmones, lo cual dificulta la respiración.\r\n",
                            IcdCode = "CB01",
                            Title = "Edema pulmonar"
                        },
                        new
                        {
                            Id = new Guid("7791a6c3-b96b-4fd2-8777-1fabc70a3911"),
                            Description = "",
                            IcdCode = "9C21",
                            Title = "Endoftalmitis"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskFactors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a34f2c12-d4b6-42e9-8f7a-9012c3e4f567"),
                            Description = "Tabaquismo activo",
                            IcdCode = "I250",
                            Title = "Tabaquismo"
                        },
                        new
                        {
                            Id = new Guid("b78f3e45-c5d6-47e1-a9f8-3456d7e8f901"),
                            Description = "Obesidad",
                            IcdCode = "E669",
                            Title = "Obesidad"
                        },
                        new
                        {
                            Id = new Guid("c98f4e56-d7f8-489a-b9e1-4567e8f9a012"),
                            Description = "Consumo de drogas",
                            IcdCode = "F102",
                            Title = "Drogadicción"
                        },
                        new
                        {
                            Id = new Guid("d12f5e67-e9f0-4a9b-c8f2-5678f9a0b123"),
                            Description = "Cirrosis hepática",
                            IcdCode = "K746",
                            Title = "Cirrosis Hepática"
                        },
                        new
                        {
                            Id = new Guid("e23f6e78-f1f2-4b0c-d9f3-6789a0b1c234"),
                            Description = "Sedentarismo",
                            IcdCode = "Z720",
                            Title = "Sedentarismo"
                        },
                        new
                        {
                            Id = new Guid("f45f7e89-a1c2-4b5d-bcde-67890a1b2345"),
                            Description = "Uso prolongado de lentes de contacto",
                            IcdCode = "H522",
                            Title = "Uso prolongado de lentes de contacto"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Doses")
                        .HasColumnType("int");

                    b.Property<string>("Laboratory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("308c146a-7b3e-4426-b394-971aad7e50bb"),
                            Doses = 1,
                            Laboratory = "GlaxoSmithKline",
                            Name = "Vacuna contra el tétanos"
                        },
                        new
                        {
                            Id = new Guid("04561950-934c-47d9-a4df-55daa2143135"),
                            Doses = 2,
                            Laboratory = "Merck",
                            Name = "Vacuna contra el sarampión"
                        },
                        new
                        {
                            Id = new Guid("9c7bed88-e92c-459d-8a50-2fd9041c2c26"),
                            Doses = 3,
                            Laboratory = "Sanofi Pasteur",
                            Name = "Vacuna contra la hepatitis B"
                        },
                        new
                        {
                            Id = new Guid("ff079100-01b3-4902-86b0-64083d72c6fe"),
                            Doses = 2,
                            Laboratory = "Pfizer",
                            Name = "Vacuna contra la varicela"
                        },
                        new
                        {
                            Id = new Guid("d8d4c92b-a7d9-4205-8524-829ef5ca97d7"),
                            Doses = 2,
                            Laboratory = "Merck",
                            Name = "Vacuna contra el VPH"
                        });
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverageLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HealthInsurances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b51ec3f9-bdc8-4a74-b43e-bf4da6e2f9b9"),
                            CoverageLevel = "Low",
                            InsuranceCompany = "SaludCo",
                            InsuranceName = "Seguro Salud Total",
                            PolicyType = "Individual"
                        },
                        new
                        {
                            Id = new Guid("7f5d5339-9de6-4ab0-b43c-d6b3d43e4d80"),
                            CoverageLevel = "High",
                            InsuranceCompany = "VivaSalud",
                            InsuranceName = "Plan Familiar Salud",
                            PolicyType = "Family"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Appointment", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.DoctorMedicalSpecialty", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Doctors")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.HealthCenterServices", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("HealthCenterServices")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Service", "Service")
                        .WithMany("HealthCenterServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.MedicationCoverage", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", "HealthInsurance")
                        .WithMany("MedicationCoverages")
                        .HasForeignKey("HealthInsuranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Products.Medication", "Medication")
                        .WithMany("Coverages")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthInsurance");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientAllergy", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", "Allergy")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Allergy");

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientDiscapacity", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", "Discapacity")
                        .WithMany("PatientDiscapacities")
                        .HasForeignKey("DiscapacityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("Discapacities")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Discapacities")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Discapacity");

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientHealthInsurance", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", "HealthInsurance")
                        .WithMany("SubscribedPatients")
                        .HasForeignKey("HealthInsuranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("HealthInsurances")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("HealthInsurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientIllness", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", "Illness")
                        .WithMany("PatientIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("Illnesses")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Illnesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientLabTestPrescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("LabTestsPrescribed")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.LabTech", "LabTech")
                        .WithMany("Prescriptions")
                        .HasForeignKey("LabTechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Products.LabTest", "LabTest")
                        .WithMany("Prescriptions")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("PatientLabTests")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("LabTests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("LabTech");

                    b.Navigation("LabTest");

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientMedicationPrescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("MedicationPrescribed")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("PatientMedications")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.Products.Medication", "Medication")
                        .WithMany("PatientMedicationPrescriptions")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Medications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientRiskFactor", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", "MedicalConsultation")
                        .WithMany("RiskFactors")
                        .HasForeignKey("MedicalConsultationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("RiskFactors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", "RiskFactor")
                        .WithMany("PatientRiskFactors")
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MedicalConsultation");

                    b.Navigation("Patient");

                    b.Navigation("RiskFactor");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Relations.PatientVaccine", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", null)
                        .WithMany("PatientVaccines")
                        .HasForeignKey("MedicalConsultationId");

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("Vaccines")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", "Vaccine")
                        .WithMany("PatientVaccines")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Admin", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Admins")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Admin", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Assistant", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Assistants")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Assistant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "CurrentlyWorkingHealthCenter")
                        .WithMany("Doctors")
                        .HasForeignKey("CurrentlyWorkingHealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("CurrentlyWorkingHealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.LabTech", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.LabTech", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "PrimaryCarePhysician")
                        .WithMany("PrimaryCarePatients")
                        .HasForeignKey("PrimaryCarePhysicianId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");

                    b.Navigation("PrimaryCarePhysician");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Registrator", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Models.HealthCenter", "HealthCenter")
                        .WithMany("Registrators")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.User", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SedisBackend.Core.Domain.Entities.Users.Persons.Registrator", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Family_History.FamilyHistory", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("FamilyHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Patient");

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", "Doctor")
                        .WithMany("MedicalConsultations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", "Patient")
                        .WithMany("MedicalConsultations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.HealthCenter", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Appointments");

                    b.Navigation("Assistants");

                    b.Navigation("Doctors");

                    b.Navigation("HealthCenterServices");

                    b.Navigation("Registrators");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.MedicalSpecialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Products.LabTest", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Products.Medication", b =>
                {
                    b.Navigation("Coverages");

                    b.Navigation("PatientMedicationPrescriptions");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Models.Service", b =>
                {
                    b.Navigation("HealthCenterServices");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("LabTestsPrescribed");

                    b.Navigation("MedicalConsultations");

                    b.Navigation("MedicationPrescribed");

                    b.Navigation("PrimaryCarePatients");

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.LabTech", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Entities.Users.Persons.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("Discapacities");

                    b.Navigation("FamilyHistories");

                    b.Navigation("HealthInsurances");

                    b.Navigation("Illnesses");

                    b.Navigation("LabTests");

                    b.Navigation("MedicalConsultations");

                    b.Navigation("Medications");

                    b.Navigation("RiskFactors");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", b =>
                {
                    b.Navigation("PatientAllergies");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.MedicalConsultation.MedicalConsultation", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("Discapacities");

                    b.Navigation("Illnesses");

                    b.Navigation("PatientLabTests");

                    b.Navigation("PatientMedications");

                    b.Navigation("PatientVaccines");

                    b.Navigation("RiskFactors");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", b =>
                {
                    b.Navigation("PatientDiscapacities");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", b =>
                {
                    b.Navigation("PatientIllnesses");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", b =>
                {
                    b.Navigation("PatientRiskFactors");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", b =>
                {
                    b.Navigation("PatientVaccines");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", b =>
                {
                    b.Navigation("MedicationCoverages");

                    b.Navigation("SubscribedPatients");
                });
#pragma warning restore 612, 618
        }
    }
}
