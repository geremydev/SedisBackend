// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SedisBackend.Infrastructure.Persistence.Contexts;

#nullable disable

namespace SedisBackend.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SedisContext))]
    [Migration("20240407143844_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SedisBackend.Core.Domain.Appointments.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsultationRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsultationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Health_Centers.HealthCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HealthCenterCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthCenters", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Locations.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.PatientAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllergicReaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergies", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("ClinicalHistories", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Family_History.FamilyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelativeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RelativeId1");

                    b.ToTable("FamilyHistories", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discapacities", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.PatientDiscapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscapacityId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscapacityId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDiscapacities", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Illnesses", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness_Condition.PatientIllness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IllnessId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientIllnesses", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.PatientRiskFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RiskFactorId");

                    b.ToTable("PatientRiskFactors", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskFactors", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.PatientVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppliedDoses")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("VaccineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccineId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineId1");

                    b.ToTable("PatientVaccines", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doses")
                        .HasColumnType("int");

                    b.Property<string>("Laboratory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverageLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthInsurances", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.MedicationCoverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CoinsurancePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CopayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CoverageStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("MedicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId1")
                        .HasColumnType("int");

                    b.Property<bool>("PriorAuthorizationRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthInsuranceId");

                    b.HasIndex("MedicationId1");

                    b.ToTable("MedicationCoverages", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.PatientHealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HealthInsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthInsuranceId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHealthInsurance");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.LabTestPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("ResultUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalHistoryId");

                    b.HasIndex("LabTestId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("LabTestPrescriptions", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.MedicationPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId1")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TreatmentEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TreatmentStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId1");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("MedicationPrescriptions", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("OtherPrescriptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalHistoryId")
                        .IsUnique();

                    b.ToTable("Prescriptions", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Products.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LabTests", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Products.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Concentration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugInteractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precautions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteOfAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medications", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.DoctorHealthCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("EntryHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExitHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("DoctorHealthCenters", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.DoctorMedicalSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalSpecialityId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalSpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("DoctorMedicalSpecialities", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.MedicalSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialities", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Patients.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryCarePhysicianId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Doctors.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Health_Centers.HealthCenter", "HealthCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.PatientAllergy", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", "Allergy")
                        .WithMany("Patients")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Doctors.Doctor", "Doctor")
                        .WithMany("DevelopedClinicalHistories")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("ClinicalHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Family_History.FamilyHistory", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("FamilyHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId1");

                    b.Navigation("Patient");

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.PatientDiscapacity", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Discapacity_Condition.Discapacity", "Discapacity")
                        .WithMany()
                        .HasForeignKey("DiscapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Discapacities")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discapacity");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness_Condition.PatientIllness", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Illness", "Illness")
                        .WithMany()
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Illnesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.PatientRiskFactor", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("RiskFactors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Medical_Conditions.Risk_Factor.RiskFactor", "RiskFactor")
                        .WithMany()
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RiskFactor");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Vaccines.PatientVaccine", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Vaccines")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Vaccines.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.MedicationCoverage", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", "HealthInsurance")
                        .WithMany("MedicationCoverages")
                        .HasForeignKey("HealthInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Products.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthInsurance");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.PatientHealthInsurance", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", "HealthInsurance")
                        .WithMany("SubscribedPatients")
                        .HasForeignKey("HealthInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthInsurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.LabTestPrescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", "ClinicalHistory")
                        .WithMany()
                        .HasForeignKey("ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Products.LabTest", "LabTest")
                        .WithMany()
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Prescriptions.Prescription", "Prescription")
                        .WithMany("PrescribedLabTests")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClinicalHistory");

                    b.Navigation("LabTest");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.MedicationPrescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Products.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Prescriptions.Prescription", "Prescription")
                        .WithMany("PrescribedMedications")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Patient");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.Prescription", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", "ClinicalHistory")
                        .WithOne("Prescription")
                        .HasForeignKey("SedisBackend.Core.Domain.Prescriptions.Prescription", "ClinicalHistoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClinicalHistory");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.DoctorHealthCenter", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Doctors.Doctor", "Doctor")
                        .WithMany("CurrentlyWorkingHealthCenters")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Health_Centers.HealthCenter", "HealthCenter")
                        .WithMany("Doctors")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.DoctorMedicalSpecialty", b =>
                {
                    b.HasOne("SedisBackend.Core.Domain.Users.Doctors.Doctor", "Doctor")
                        .WithMany("Specialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SedisBackend.Core.Domain.Users.Doctors.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany()
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Health_Centers.HealthCenter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Allergies.Allergy", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_History.Clinical_History.ClinicalHistory", b =>
                {
                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Medical_Insurance.HealthInsurance", b =>
                {
                    b.Navigation("MedicationCoverages");

                    b.Navigation("SubscribedPatients");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Prescriptions.Prescription", b =>
                {
                    b.Navigation("PrescribedLabTests");

                    b.Navigation("PrescribedMedications");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Doctors.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CurrentlyWorkingHealthCenters");

                    b.Navigation("DevelopedClinicalHistories");

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("SedisBackend.Core.Domain.Users.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Appointments");

                    b.Navigation("ClinicalHistories");

                    b.Navigation("Discapacities");

                    b.Navigation("FamilyHistories");

                    b.Navigation("Illnesses");

                    b.Navigation("RiskFactors");

                    b.Navigation("Vaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
